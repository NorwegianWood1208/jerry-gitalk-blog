(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{532:function(t,a,e){"use strict";e.r(a);var s=e(20),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("关于APP开发，一直以来有非常多的方案。不管是安卓和iOS的原生开发、还是所谓的套壳开发，还有近几年比较火的react-native以及uni-app。从开发效率和用户体验上综合考虑，都各有利弊。19年开始flutter作为一种解决方案渐渐地进入大家的视野，2020年flutter的star量成倍的上涨，说明这个方案正在越来越被大家所接受。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-f24bada7d9726449.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),t._v("\n对这个新生事物非常的有兴趣，最近也是刚好借了一个契机，花了不到两周的时间，学语法、搭环境，使用flutter + H5的方式实现了一个比较基础的APP架构，最后完美运行在安卓和iOS的真机上：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-dfd2ad09f7499f81.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h2",{attrs:{id:"什么是flutter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是flutter"}},[t._v("#")]),t._v(" 什么是flutter？")]),t._v(" "),e("h3",{attrs:{id:"官方定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方定义"}},[t._v("#")]),t._v(" 官方定义：")]),t._v(" "),e("p",[t._v("Flutter 是 Google 开源的 UI 工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台。")]),t._v(" "),e("h2",{attrs:{id:"安装与配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装与配置"}},[t._v("#")]),t._v(" 安装与配置")]),t._v(" "),e("h3",{attrs:{id:"一、安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、安装"}},[t._v("#")]),t._v(" 一、安装")]),t._v(" "),e("h4",{attrs:{id:"要完整的跑起来一个flutter项目-大概需要下面这些工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#要完整的跑起来一个flutter项目-大概需要下面这些工具"}},[t._v("#")]),t._v(" 要完整的跑起来一个flutter项目，大概需要下面这些工具：")]),t._v(" "),e("p",[t._v("1、Android Studio + avd")]),t._v(" "),e("p",[t._v("2、flutter SDK(包含Dart SDK不用单独下载)")]),t._v(" "),e("p",[t._v("3、vscode、webstorm、IDEA(这个看个人喜好)")]),t._v(" "),e("p",[t._v("4、java JDK(官网下载得注册)")]),t._v(" "),e("p",[t._v("5、Android SDK(这个直接在Android Studio里面安装)")]),t._v(" "),e("p",[t._v("6、需要各种模拟器(推荐pixel 和Xcode，一个安卓一个iOS)")]),t._v(" "),e("p",[t._v("关于java JDK和Android Studio 安装包，如果需要的话可以私信")]),t._v(" "),e("h4",{attrs:{id:"_1、下载flutter-sdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、下载flutter-sdk"}},[t._v("#")]),t._v(" 1、下载flutter SDK")]),t._v(" "),e("p",[t._v("去flutter官网下载其最新可用的安装包，我选择的是2.0.1beta稳定版(https://flutter.dev/docs/development/tools/sdk/releases#windows)")]),t._v(" "),e("h4",{attrs:{id:"_2、解压安装包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、解压安装包"}},[t._v("#")]),t._v(" 2、解压安装包")]),t._v(" "),e("p",[t._v("将安装包zip解压到你想安装Flutter SDK的路径")]),t._v(" "),e("h4",{attrs:{id:"_3、运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、运行"}},[t._v("#")]),t._v(" 3、运行")]),t._v(" "),e("p",[t._v("在Flutter安装目录的flutter文件下找到flutter_console.bat，双击运行并启动flutter命令行，接下来，你就可以在Flutter命令行运行flutter命令了。")]),t._v(" "),e("h3",{attrs:{id:"二、配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、配置"}},[t._v("#")]),t._v(" 二、配置")]),t._v(" "),e("h4",{attrs:{id:"_1、修改环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、修改环境变量"}},[t._v("#")]),t._v(" 1、修改环境变量")]),t._v(" "),e("p",[t._v("在“用户变量”下检查是否有名为“Path”的条目:")]),t._v(" "),e("p",[t._v("如果该条目存在, 追加 flutter\\bin的全路径，使用 ; 作为分隔符.")]),t._v(" "),e("p",[t._v("如果条目不存在, 创建一个新用户变量 Path ，然后将 flutter\\bin的全路径作为它的值.")]),t._v(" "),e("p",[t._v("path加上flutter")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-90f3e0b6d25a8c63.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("p",[t._v("在“用户变量”下检查是否有名为”PUB_HOSTED_URL”和”FLUTTER_STORAGE_BASE_URL”的条目，如果没有，也添加它们。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-b48ea77c54619fa4.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-53bc6b0ff552f2e2.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),t._v("\n重启Windows以应用此更改")]),t._v(" "),e("h3",{attrs:{id:"_2、运行-flutter-doctor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、运行-flutter-doctor"}},[t._v("#")]),t._v(" 2、运行 flutter doctor")]),t._v(" "),e("p",[t._v("打开一个新的命令提示符或PowerShell窗口并运行以下命令以查看是否需要安装任何依赖项来完成安装：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" flutter doctor\n")])])]),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-2560cf1e31a4495f.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h2",{attrs:{id:"编译器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器"}},[t._v("#")]),t._v(" 编译器")]),t._v(" "),e("h3",{attrs:{id:"一、安装-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、安装-2"}},[t._v("#")]),t._v(" 一、安装")]),t._v(" "),e("p",[t._v("从上面执行flutter doctor的提示来看，flutter常用的编译器是IDE、Android Studio和vscode，一般情况下最好是都安装上，便于后期调试。")]),t._v(" "),e("h4",{attrs:{id:"android-studio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-studio"}},[t._v("#")]),t._v(" Android Studio")]),t._v(" "),e("p",[t._v("http://www.android-studio.org/")]),t._v(" "),e("h3",{attrs:{id:"二、配置编译器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、配置编译器"}},[t._v("#")]),t._v(" 二、配置编译器")]),t._v(" "),e("p",[t._v("就以vscode为例，配置编译器，开始我们的第一个项目")]),t._v(" "),e("h4",{attrs:{id:"启动-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-vs-code"}},[t._v("#")]),t._v(" 启动 VS Code")]),t._v(" "),e("h4",{attrs:{id:"调用-view-command-palette"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调用-view-command-palette"}},[t._v("#")]),t._v(" 调用 View>Command Palette…")]),t._v(" "),e("h4",{attrs:{id:"输入-install-然后选择-extensions-install-extension-action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入-install-然后选择-extensions-install-extension-action"}},[t._v("#")]),t._v(" 输入 ‘install’, 然后选择 Extensions: Install Extension action")]),t._v(" "),e("h4",{attrs:{id:"在搜索框输入-flutter-在搜索结果列表中选择-flutter-然后点击-install"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在搜索框输入-flutter-在搜索结果列表中选择-flutter-然后点击-install"}},[t._v("#")]),t._v(" 在搜索框输入 flutter , 在搜索结果列表中选择 ‘Flutter’, 然后点击 Install")]),t._v(" "),e("h4",{attrs:{id:"选择-ok-重新启动-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择-ok-重新启动-vs-code"}},[t._v("#")]),t._v(" 选择 ‘OK’ 重新启动 VS Code")]),t._v(" "),e("h2",{attrs:{id:"hello-flutter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hello-flutter"}},[t._v("#")]),t._v(" hello Flutter")]),t._v(" "),e("h3",{attrs:{id:"一、搭建一个基础的flutter服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、搭建一个基础的flutter服务"}},[t._v("#")]),t._v(" 一、搭建一个基础的flutter服务")]),t._v(" "),e("h4",{attrs:{id:"_1、启动-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、启动-vs-code"}},[t._v("#")]),t._v(" 1、启动 VS Code")]),t._v(" "),e("h4",{attrs:{id:"_2、调用-view-command-palette"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、调用-view-command-palette"}},[t._v("#")]),t._v(" 2、调用 View>Command Palette…")]),t._v(" "),e("h4",{attrs:{id:"_3、输入-flutter-然后选择-flutter-new-project-action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、输入-flutter-然后选择-flutter-new-project-action"}},[t._v("#")]),t._v(" 3、输入 ‘flutter’, 然后选择 ‘Flutter: New Project’ action")]),t._v(" "),e("h4",{attrs:{id:"_4、输入-project-名称-如myapp-然后按回车键"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、输入-project-名称-如myapp-然后按回车键"}},[t._v("#")]),t._v(" 4、输入 Project 名称 (如myapp), 然后按回车键")]),t._v(" "),e("h4",{attrs:{id:"_5、指定放置项目的位置-然后按蓝色的确定按钮"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、指定放置项目的位置-然后按蓝色的确定按钮"}},[t._v("#")]),t._v(" 5、指定放置项目的位置，然后按蓝色的确定按钮")]),t._v(" "),e("h4",{attrs:{id:"_6、等待项目创建继续-并显示main-dart文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、等待项目创建继续-并显示main-dart文件"}},[t._v("#")]),t._v(" 6、等待项目创建继续，并显示main.dart文件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-6ed8377437e67dc2.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"二、运行服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、运行服务"}},[t._v("#")]),t._v(" 二、运行服务")]),t._v(" "),e("h4",{attrs:{id:"_1、确保在vs-code的右下角选择了目标设备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、确保在vs-code的右下角选择了目标设备"}},[t._v("#")]),t._v(" 1、确保在VS Code的右下角选择了目标设备")]),t._v(" "),e("h4",{attrs:{id:"_2、按-f5-键或调用debug-start-debugging"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、按-f5-键或调用debug-start-debugging"}},[t._v("#")]),t._v(" 2、按 F5 键或调用Debug>Start Debugging")]),t._v(" "),e("h4",{attrs:{id:"_3、等待应用程序启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、等待应用程序启动"}},[t._v("#")]),t._v(" 3、等待应用程序启动")]),t._v(" "),e("h4",{attrs:{id:"_4、如果一切正常-在应用程序建成功后-您应该在您的设备或模拟器上看到应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、如果一切正常-在应用程序建成功后-您应该在您的设备或模拟器上看到应用程序"}},[t._v("#")]),t._v(" 4、如果一切正常，在应用程序建成功后，您应该在您的设备或模拟器上看到应用程序:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-51d41961887360d8.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"热更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#热更新"}},[t._v("#")]),t._v(" 热更新")]),t._v(" "),e("p",[t._v("和vue-cli一样，修改完保存后自动热更新")]),t._v(" "),e("h2",{attrs:{id:"创建-flutter-app"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-flutter-app"}},[t._v("#")]),t._v(" 创建 Flutter app")]),t._v(" "),e("h3",{attrs:{id:"一、基础版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、基础版"}},[t._v("#")]),t._v(" 一、基础版")]),t._v(" "),e("p",[t._v("在这个示例中，你将主要编辑Dart代码所在的 lib/main.dart 文件,")]),t._v(" "),e("h4",{attrs:{id:"_1、替换-lib-main-dart"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、替换-lib-main-dart"}},[t._v("#")]),t._v(" 1、替换 lib/main.dart.")]),t._v(" "),e("p",[t._v("删除lib / main.dart中的所有代码，然后替换为下面的代码，它将在屏幕的中心显示“Hello World”.")]),t._v(" "),e("h4",{attrs:{id:"_2、运行应用程序-你应该看到如下界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、运行应用程序-你应该看到如下界面"}},[t._v("#")]),t._v(" 2、运行应用程序，你应该看到如下界面.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-32cd613eba3f7690.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h4",{attrs:{id:"分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),e("p",[t._v("本示例创建一个Material APP。Material是一种标准的移动端和web端的视觉设计语言。 Flutter提供了一套丰富的Material widgets。")]),t._v(" "),e("p",[t._v("main函数使用了(=>)符号, 这是Dart中单行函数或方法的简写。")]),t._v(" "),e("p",[t._v("该应用程序继承了 StatelessWidget，这将会使应用本身也成为一个widget。 在Flutter中，大多数东西都是widget，包括对齐(alignment)、填充(padding)和布局(layout)")]),t._v(" "),e("p",[t._v("Scaffold 是 Material library 中提供的一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。widget树可以很复杂。")]),t._v(" "),e("p",[t._v("widget的主要工作是提供一个build()方法来描述如何根据其他较低级别的widget来显示自己。")]),t._v(" "),e("p",[t._v("本示例中的body的widget树中包含了一个Center widget, Center widget又包含一个 Text 子widget。 Center widget可以将其子widget树对其到屏幕中心。")]),t._v(" "),e("h3",{attrs:{id:"二、使用外部包-package"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、使用外部包-package"}},[t._v("#")]),t._v(" 二、使用外部包(package)")]),t._v(" "),e("p",[t._v("在这一步中，您将开始使用一个名为english_words的开源软件包 ，其中包含数千个最常用的英文单词以及一些实用功能.")]),t._v(" "),e("p",[t._v("您可以 在pub.dartlang.org上找到english_words软件包以及其他许多开源软件包")]),t._v(" "),e("h4",{attrs:{id:"_1、安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、安装"}},[t._v("#")]),t._v(" 1、安装")]),t._v(" "),e("p",[t._v("pubspec文件管理Flutter应用程序的assets(资源，如图片、package等)。 在pubspec.yaml中，将english_words（3.1.0或更高版本）添加到依赖项列表：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-9c52ef118de9e469.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h4",{attrs:{id:"_2、引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、引入"}},[t._v("#")]),t._v(" 2、引入")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("import 'package:flutter/material.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() => runApp(new MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = new WordPair.random();\n    return new MaterialApp(\n      title: 'Welcome to Flutter',\n      home: new Scaffold(\n        appBar: new AppBar(\n          title: new Text('Welcome to Flutter'),\n        ),\n        body: new Center(\n          //child: new Text('Hello World'),\n          child: new Text(wordPair.asPascalCase),\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("h4",{attrs:{id:"_3、启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、启动"}},[t._v("#")]),t._v(" 3、启动")]),t._v(" "),e("p",[t._v("如果应用程序正在运行，请使用热重载按钮 (lightning bolt icon) 更新正在运行的应用程序。每次单击热重载或保存项目时，都会在正在运行的应用程序中随机选择不同的单词对。 这是因为单词对是在 build 方法内部生成的。每次MaterialApp需要渲染时或者在Flutter Inspector中切换平台时 build 都会运行.")]),t._v(" "),e("h3",{attrs:{id:"三、添加一个-有状态的部件-stateful-widget"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、添加一个-有状态的部件-stateful-widget"}},[t._v("#")]),t._v(" 三、添加一个 有状态的部件（Stateful widget）")]),t._v(" "),e("p",[t._v("Stateless widgets 是不可变的, 这意味着它们的属性不能改变 - 所有的值都是最终的.")]),t._v(" "),e("p",[t._v("Stateful widgets 持有的状态可能在widget生命周期中发生变化. 实现一个 stateful widget 至少需要两个类:")]),t._v(" "),e("p",[t._v("一个 StatefulWidget类。\n一个 State类。 StatefulWidget类本身是不变的，但是 State类在widget生命周期中始终存在.\n在这一步中，您将添加一个有状态的widget-RandomWords，它创建其State类RandomWordsState。State类将最终为widget维护建议的和喜欢的单词对。")]),t._v(" "),e("h4",{attrs:{id:"_1、添加一个randomwords-widget"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、添加一个randomwords-widget"}},[t._v("#")]),t._v(" 1、添加一个RandomWords widget")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWords extends StatefulWidget {\n  @override\n  createState() => new RandomWordsState();\n}\n")])])]),e("h4",{attrs:{id:"_2、添加-randomwordsstate-类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、添加-randomwordsstate-类"}},[t._v("#")]),t._v(" 2、添加 RandomWordsState 类.")]),t._v(" "),e("p",[t._v("该应用程序的大部分代码都在该类中， 该类持有RandomWords widget的状态。这个类将保存随着用户滚动而无限增长的生成的单词对， 以及喜欢的单词对，用户通过重复点击心形 ❤️ 图标来将它们从列表中添加或删除。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n}\n")])])]),e("h4",{attrs:{id:"_3、添加一个build方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、添加一个build方法"}},[t._v("#")]),t._v(" 3、添加一个build方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = new WordPair.random();\n    return new Text(wordPair.asPascalCase);\n  }\n}\n")])])]),e("h4",{attrs:{id:"_4、挂在到myapp上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、挂在到myapp上"}},[t._v("#")]),t._v(" 4、挂在到myApp上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Welcome to Flutter',\n      home: new Scaffold(\n        appBar: new AppBar(\n          title: new Text('Welcome to Flutter'),\n        ),\n        body: new Center(\n          //child: new Text(wordPair.asPascalCase),\n          child: new RandomWords(),\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("h4",{attrs:{id:"_5、运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、运行"}},[t._v("#")]),t._v(" 5、运行")]),t._v(" "),e("p",[t._v("[图片上传失败...(image-1a42f-1616398520798)]")]),t._v(" "),e("h3",{attrs:{id:"四、创建一个无限滚动listview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、创建一个无限滚动listview"}},[t._v("#")]),t._v(" 四、创建一个无限滚动ListView")]),t._v(" "),e("p",[t._v("在这一步中，您将扩展（继承）RandomWordsState类，以生成并显示单词对列表。 当用户滚动时，ListView中显示的列表将无限增长。 ListView的builder工厂构造函数允许您按需建立一个懒加载的列表视图。")]),t._v(" "),e("h4",{attrs:{id:"_1、向randomwordsstate类中添加一个-suggestions列表以保存建议的单词对。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、向randomwordsstate类中添加一个-suggestions列表以保存建议的单词对。"}},[t._v("#")]),t._v(" 1、向RandomWordsState类中添加一个_suggestions列表以保存建议的单词对。")]),t._v(" "),e("p",[t._v("该变量以下划线（_）开头，在Dart语言中使用下划线前缀标识符，会强制其变成私有的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n  final _suggestions = <WordPair>[];\n\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n  ...\n}\n")])])]),e("h4",{attrs:{id:"_2、向randomwordsstate类添加一个-buildsuggestions-函数-此方法构建显示建议单词对的listview。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、向randomwordsstate类添加一个-buildsuggestions-函数-此方法构建显示建议单词对的listview。"}},[t._v("#")]),t._v(" 2、向RandomWordsState类添加一个 _buildSuggestions() 函数. 此方法构建显示建议单词对的ListView。")]),t._v(" "),e("p",[t._v("ListView类提供了一个builder属性，itemBuilder 值是一个匿名回调函数， 接受两个参数- BuildContext和行迭代器i。迭代器从0开始， 每调用一次该函数，i就会自增1，对于每个建议的单词对都会执行一次。该模型允许建议的单词对列表在用户滚动时无限增长。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('class RandomWordsState extends State<RandomWords> {\n  ...\n  Widget _buildSuggestions() {\n    return new ListView.builder(\n      padding: const EdgeInsets.all(16.0),\n      // 对于每个建议的单词对都会调用一次itemBuilder，然后将单词对添加到ListTile行中\n      // 在偶数行，该函数会为单词对添加一个ListTile row.\n      // 在奇数行，该函数会添加一个分割线widget，来分隔相邻的词对。\n      // 注意，在小屏幕上，分割线看起来可能比较吃力。\n      itemBuilder: (context, i) {\n        // 在每一列之前，添加一个1像素高的分隔线widget\n        if (i.isOdd) return new Divider();\n\n        // 语法 "i ~/ 2" 表示i除以2，但返回值是整形（向下取整），比如i为：1, 2, 3, 4, 5\n        // 时，结果为0, 1, 1, 2, 2， 这可以计算出ListView中减去分隔线后的实际单词对数量\n        final index = i ~/ 2;\n        // 如果是建议列表中最后一个单词对\n        if (index >= _suggestions.length) {\n          // ...接着再生成10个单词对，然后添加到建议列表\n          _suggestions.addAll(generateWordPairs().take(10));\n        }\n        return _buildRow(_suggestions[index]);\n      }\n    );\n  }\n}\n')])])]),e("h4",{attrs:{id:"_3、对于每一个单词对-buildsuggestions函数都会调用一次-buildrow。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、对于每一个单词对-buildsuggestions函数都会调用一次-buildrow。"}},[t._v("#")]),t._v(" 3、对于每一个单词对，_buildSuggestions函数都会调用一次_buildRow。")]),t._v(" "),e("p",[t._v("这个函数在ListTile中显示每个新词对，这使您在下一步中可以生成更漂亮的显示行")]),t._v(" "),e("p",[t._v("在RandomWordsState中添加一个_buildRow函数 :")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n  ...\n\n  Widget _buildRow(WordPair pair) {\n    return new ListTile(\n      title: new Text(\n        pair.asPascalCase,\n        style: _biggerFont,\n      ),\n    );\n  }\n}\n")])])]),e("h4",{attrs:{id:"_4、更新randomwordsstate的build方法以使用-buildsuggestions-而不是直接调用单词生成库。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、更新randomwordsstate的build方法以使用-buildsuggestions-而不是直接调用单词生成库。"}},[t._v("#")]),t._v(" 4、更新RandomWordsState的build方法以使用_buildSuggestions()，而不是直接调用单词生成库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n  ...\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold (\n      appBar: new AppBar(\n        title: new Text('Startup Name Generator'),\n      ),\n      body: _buildSuggestions(),\n    );\n  }\n  ...\n}\n")])])]),e("h4",{attrs:{id:"_5、更新myapp的build方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、更新myapp的build方法。"}},[t._v("#")]),t._v(" 5、更新MyApp的build方法。")]),t._v(" "),e("p",[t._v("从MyApp中删除Scaffold和AppBar实例。 这些将由RandomWordsState管理，这使得用户在下一步中从一个屏幕导航到另一个屏幕时， 可以更轻松地更改导航栏中的的路由名称。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Startup Name Generator',\n      home: new RandomWords(),\n    );\n  }\n}\n")])])]),e("h3",{attrs:{id:"五、交互版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、交互版"}},[t._v("#")]),t._v(" 五、交互版")]),t._v(" "),e("p",[t._v("在这一步中，您将为每一行添加一个可点击的心形 ❤️ 图标。当用户点击列表中的条目，切换其“收藏”状态时，将该词对添加到或移除出“收藏夹”。")]),t._v(" "),e("h4",{attrs:{id:"_1、添加一个-saved-set-集合-到randomwordsstate。这个集合存储用户喜欢-收藏-的单词对。-在这里-set比list更合适-因为set中不允许重复的值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、添加一个-saved-set-集合-到randomwordsstate。这个集合存储用户喜欢-收藏-的单词对。-在这里-set比list更合适-因为set中不允许重复的值。"}},[t._v("#")]),t._v(" 1、添加一个 _saved Set(集合) 到RandomWordsState。这个集合存储用户喜欢（收藏）的单词对。 在这里，Set比List更合适，因为Set中不允许重复的值。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("class RandomWordsState extends State<RandomWords> {\n  final _suggestions = <WordPair>[];\n\n  final _saved = new Set<WordPair>();\n\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n  ...\n}\n")])])]),e("h4",{attrs:{id:"_2、在-buildrow-方法中添加-alreadysaved来检查确保单词对还没有添加到收藏夹中。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、在-buildrow-方法中添加-alreadysaved来检查确保单词对还没有添加到收藏夹中。"}},[t._v("#")]),t._v(" 2、在 _buildRow 方法中添加 alreadySaved来检查确保单词对还没有添加到收藏夹中。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("Widget _buildRow(WordPair pair) {\n  final alreadySaved = _saved.contains(pair);\n  ...\n}\n")])])]),e("h4",{attrs:{id:"_3、同时在-buildrow-中-添加一个心形-❤️-图标到-listtiles以启用收藏功能。接下来-你就可以给心形-❤️-图标添加交互能力了。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、同时在-buildrow-中-添加一个心形-❤️-图标到-listtiles以启用收藏功能。接下来-你就可以给心形-❤️-图标添加交互能力了。"}},[t._v("#")]),t._v(" 3、同时在 _buildRow()中， 添加一个心形 ❤️ 图标到 ListTiles以启用收藏功能。接下来，你就可以给心形 ❤️ 图标添加交互能力了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("Widget _buildRow(WordPair pair) {\n  final alreadySaved = _saved.contains(pair);\n  return new ListTile(\n    title: new Text(\n      pair.asPascalCase,\n      style: _biggerFont,\n    ),\n    trailing: new Icon(\n      alreadySaved ? Icons.favorite : Icons.favorite_border,\n      color: alreadySaved ? Colors.red : null,\n    ),\n  );\n}\n")])])]),e("h4",{attrs:{id:"_4、重新启动应用。你现在可以在每一行看到心形❤️图标️-但它们还没有交互。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、重新启动应用。你现在可以在每一行看到心形❤️图标️-但它们还没有交互。"}},[t._v("#")]),t._v(" 4、重新启动应用。你现在可以在每一行看到心形❤️图标️，但它们还没有交互。")]),t._v(" "),e("h4",{attrs:{id:"_5、在-buildrow中让心形❤️图标变得可以点击。如果单词条目已经添加到收藏夹中-再次点击它将其从收藏夹中删除。当心形❤️图标被点击时-函数调用setstate-通知框架状态已经改变。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、在-buildrow中让心形❤️图标变得可以点击。如果单词条目已经添加到收藏夹中-再次点击它将其从收藏夹中删除。当心形❤️图标被点击时-函数调用setstate-通知框架状态已经改变。"}},[t._v("#")]),t._v(" 5、在 _buildRow中让心形❤️图标变得可以点击。如果单词条目已经添加到收藏夹中， 再次点击它将其从收藏夹中删除。当心形❤️图标被点击时，函数调用setState()通知框架状态已经改变。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("Widget _buildRow(WordPair pair) {\n  final alreadySaved = _saved.contains(pair);\n  return new ListTile(\n    title: new Text(\n      pair.asPascalCase,\n      style: _biggerFont,\n    ),\n    trailing: new Icon(\n      alreadySaved ? Icons.favorite : Icons.favorite_border,\n      color: alreadySaved ? Colors.red : null,\n    ),\n    onTap: () {\n      setState(() {\n        if (alreadySaved) {\n          _saved.remove(pair);\n        } else {\n          _saved.add(pair);\n        }\n      });\n    },\n  );\n}\n")])])]),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19824658-9b20522554718a34.image?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),t._v(" "),e("h2",{attrs:{id:"写在最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),e("p",[t._v("关于搭建基础的flutter环境，非常简单，只要你照着官网一步一步往下走，基本不会遇到什么问题。")])])}),[],!1,null,null,null);a.default=r.exports}}]);