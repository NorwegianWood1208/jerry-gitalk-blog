(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{550:function(n,e,t){"use strict";t.r(e);var a=t(20),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("项目涉及到移动端查看电子合同的问题，前前后后试了三种方案，真是一步一个坑，三种方案各有各的优点，不水，直接上代码，按照自己的需求选择。")]),n._v(" "),t("h1",{attrs:{id:"一、pdf-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、pdf-vue"}},[n._v("#")]),n._v(" 一、pdf-vue")]),n._v(" "),t("p",[n._v("直接使用vue-pdf插件，核心的代码是pdf.js，只不过就是自己封装了一下，优点是方便快捷，缺点是无法加载电子签章。")]),n._v(" "),t("p",[n._v("github地址： https://github.com/FranckFreiburger/vue-pdf#readme")]),n._v(" "),t("h3",{attrs:{id:"_1、npm-install-pdf-vue-save"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、npm-install-pdf-vue-save"}},[n._v("#")]),n._v(" 1、npm install pdf-vue --save")]),n._v(" "),t("h3",{attrs:{id:"_2、template代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、template代码"}},[n._v("#")]),n._v(" 2、template代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<template>\n  <div class="pdf" v-show="fileType === \'pdf\'">\n    <p class="arrow">\n    // 上一页\n    <span @click="changePdfPage(0)" class="turn" :class="{grey: currentPage==1}">Preview</span>\n    '+n._s(n.currentPage)+" / "+n._s(n.pageCount)+'\n    // 下一页\n    <span @click="changePdfPage(1)" class="turn" :class="{grey: currentPage==pageCount}">Next</span>\n    </p>\n    // 自己引入就可以使用,这里我的需求是做了分页功能,如果不需要分页功能,只要src就可以了\n    <pdf\n      :src="src" // src需要展示的PDF地址\n      :page="currentPage" // 当前展示的PDF页码\n      @num-pages="pageCount=$event" // PDF文件总页码\n      @page-loaded="currentPage=$event" // 一开始加载的页面\n      @loaded="loadPdfHandler"> // 加载事件\n    </pdf>\n  </div>\n</template>\n')])])]),t("h3",{attrs:{id:"_3、js代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、js代码"}},[n._v("#")]),n._v(" 3、js代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("import pdf from 'vue-pdf'\nexport default {\n    components: {pdf},\n    data () {\n      return {\n        currentPage: 0, // pdf文件页码\n        pageCount: 0, // pdf文件总页数\n        fileType: 'pdf', // 文件类型\n    　　　　src: '', // pdf文件地址\n      }\n    },\n　　created: {\n　　　　// 有时PDF文件地址会出现跨域的情况,这里最好处理一下\n　　　　this.src = pdf.createLoadingTask(this.src)\n　　}\n    method: {\n      // 改变PDF页码,val传过来区分上一页下一页的值,0上一页,1下一页\n      changePdfPage (val) {\n        // console.log(val)\n        if (val === 0 && this.currentPage > 1) {\n          this.currentPage--\n          // console.log(this.currentPage)\n        }\n        if (val === 1 && this.currentPage < this.pageCount) {\n          this.currentPage++\n          // console.log(this.currentPage)\n        }\n      },\n    \n      // pdf加载时\n      loadPdfHandler (e) {\n        this.currentPage = 1 // 加载的时候先加载第一页\n      }\n    \n    }\n}\n")])])]),t("p",[n._v("使用非常方便，尤其是只需要翻页，或者不需要翻页的，强烈推荐。")]),n._v(" "),t("h1",{attrs:{id:"二、pdf-dist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、pdf-dist"}},[n._v("#")]),n._v(" 二、pdf-dist")]),n._v(" "),t("p",[n._v("pdf-dist也是基于pdf.js的一个组件，只不过没有封装，需要自己配置，优点是可配置，可实现特殊的需求，缺点是需要自己封装，水印可加载，网上说可以加载电子签章，我的加载不出来，所以还是没采用。")]),n._v(" "),t("h3",{attrs:{id:"_1、npm-install-pdf-dist-save"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、npm-install-pdf-dist-save"}},[n._v("#")]),n._v(" 1、npm install pdf-dist --save")]),n._v(" "),t("h3",{attrs:{id:"_2、封装一个pdf-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、封装一个pdf-vue"}},[n._v("#")]),n._v(" 2、封装一个pdf.vue")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<template>\n  <div class="cpdf" id="cpdf">\n    <div class="center">\n      <canvas class="canvasstyle" id="the-canvas"></canvas>\n      <div class="contor">\n        <button @click="prev" style="margin-right: 10px">上一页</button>\n        <span>Page: <span v-text="page_num"></span> / <span v-text="page_count"></span></span>\n        <button @click="next" style="margin-left: 10px">下一页</button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport PDFJS from \'pdfjs-dist\'\n\nexport default {\n  name: \'c-pdf\',\n  // 接收父组件传来的参数   \n  props: [\'pdfurl\'],\n  components: { },\n  data () {\n    return {\n      pdfDoc: null, // pdfjs 生成的对象\n      pageNum: 1, //\n      pageRendering: false,\n      pageNumPending: null,\n      scale: 1, // 放大倍数\n      page_num: 0, // 当前页数\n      page_count: 0, // 总页数\n      maxscale: 2, // 最大放大倍数\n      minscale: 0.8// 最小放大倍数\n    }\n  },\n  methods: {\n    renderPage (num) { // 渲染pdf\n      let vm = this\n      this.pageRendering = true\n      let canvas = document.getElementById(\'the-canvas\')\n      let ctx = canvas.getContext(\'2d\')\n      let bsr =\n                ctx.webkitBackingStorePixelRatio ||\n                ctx.mozBackingStorePixelRatio ||\n                ctx.msBackingStorePixelRatio ||\n                ctx.oBackingStorePixelRatio ||\n                ctx.backingStorePixelRatio ||\n                1\n      let dpr = window.devicePixelRatio || 1\n      let ratio = dpr / bsr\n      // Using promise to fetch the page\n      this.pdfDoc.getPage(num).then(function (page) {\n        var viewport = page.getViewport(screen.availWidth / page.getViewport(1).width)\n        // alert(vm.canvas.height)\n        canvas.height = ratio * viewport.width\n        canvas.width = ratio * viewport.height\n        canvas.style.width = 1.5 * viewport.width + \'px\'\n        canvas.style.height = 1 * viewport.height + \'px\'\n        ctx.setTransform(ratio, 0, 0, ratio, 0, 0)\n        // Render PDF page into canvas context\n        var renderContext = {\n          canvasContext: ctx,\n          viewport: viewport\n        }\n        var renderTask = page.render(renderContext)\n\n        // Wait for rendering to finish\n        renderTask.promise.then(function () {\n          vm.pageRendering = false\n          if (vm.pageNumPending !== null) {\n            // New page rendering is pending\n            vm.renderPage(vm.pageNumPending)\n            vm.pageNumPending = null\n          }\n        })\n      })\n      vm.page_num = vm.pageNum\n    },\n    addscale () { // 放大\n      if (this.scale >= this.maxscale) {\n        return\n      }\n      this.scale += 0.1\n      this.queueRenderPage(this.pageNum)\n    },\n    minus () { // 缩小\n      if (this.scale <= this.minscale) {\n        return\n      }\n      this.scale -= 0.1\n      this.queueRenderPage(this.pageNum)\n    },\n    prev () { // 上一页\n      let vm = this\n      if (vm.pageNum <= 1) {\n        return\n      }\n      vm.pageNum--\n      vm.queueRenderPage(vm.pageNum)\n    },\n    next () { // 下一页\n      let vm = this\n      if (vm.pageNum >= vm.page_count) {\n        return\n      }\n      vm.pageNum++\n      vm.queueRenderPage(vm.pageNum)\n    },\n    closepdf () { // 关闭PDF\n      this.$emit(\'closepdf\')\n    },\n    queueRenderPage (num) {\n      if (this.pageRendering) {\n        this.pageNumPending = num\n      } else {\n        this.renderPage(num)\n      }\n    }\n  },\n  computed: {\n    ctx () {\n      let id = document.getElementById(\'the-canvas\')\n      return id.getContext(\'2d\')\n    }\n  },\n  mounted () {\n    let vm = this\n    PDFJS.getDocument(vm.pdfurl).then(function (pdfDoc_) { // 初始化pdf\n      vm.pdfDoc = pdfDoc_\n      vm.page_count = vm.pdfDoc.numPages\n      vm.renderPage(vm.pageNum)\n    })\n  }\n}\n\n<\/script>\n<style  lang="stylus" scoped>\n  .cpdf {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .center {\n      text-align: center;\n      height: 100%;\n      overflow: hidden;\n      padding-top: 20px;\n      .contor {\n        position: fixed;\n        bottom: 30px;\n        left: 0;\n        width: 100%;\n        z-index: 99999;\n        font-size 30px\n        margin-top 20px\n        margin-bottom: 10px;\n      }\n    }\n  }\n</style>\n')])])]),t("h3",{attrs:{id:"_3、直接当成组件-引用就可以了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、直接当成组件-引用就可以了"}},[n._v("#")]),n._v(" 3、直接当成组件，引用就可以了")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("import cdpdf from '../../../components/pdf.vue'\n\n<cdpdf :pdfurl=\"pdfurl\"></cdpdf>\n")])])]),t("p",[n._v("一开始项目使用的是pdf-dist，因为后来电子签章显示不出来：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('Warning: Unimplemented widget field type "Sig", falling back to base field type.\n')])])]),t("p",[n._v("从网上搜了很多方法，说是需要修改pdf.work.js的源码，全局搜索AnnotationFlag.HIDDEN：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("if(data.fieldType==='Sig') {\n    warn('unimplemented annotation type: Widget signature');\n    // 注释下面这行代码\n    this.setFlags(AnnotationFlag.HIDDEN);\n }\n")])])]),t("p",[n._v("可能是移动端使用微信浏览器的原因，注释掉代码还是不好使，只能再想其他办法了")]),n._v(" "),t("h1",{attrs:{id:"三、pdf-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、pdf-js"}},[n._v("#")]),n._v(" 三、pdf.js")]),n._v(" "),t("p",[n._v("最后用了最笨的办法，直接从GitHub拉下来pdf.js的demo，用iframe标签包住demo里的HTML文件，直接套着用，完美解决电子签章的问题：")]),n._v(" "),t("h3",{attrs:{id:"_1、从github拉一下源码-或者从这个地址直接下载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、从github拉一下源码-或者从这个地址直接下载"}},[n._v("#")]),n._v(" 1、从GitHub拉一下源码，或者从这个地址直接下载")]),n._v(" "),t("p",[n._v("https://mozilla.github.io/pdf.js/getting_started/#download")]),n._v(" "),t("p",[n._v("下载下来以后放在public文件下（3.x脚手架）")]),n._v(" "),t("h3",{attrs:{id:"_2、iframe标签直接粗暴的设置src"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、iframe标签直接粗暴的设置src"}},[n._v("#")]),n._v(" 2、iframe标签直接粗暴的设置src")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<iframe :src="pdfUrl" :style="{height: Height}" style="width: 100%"></iframe>\n\nthis.pdfUrl = \'../pdf/web/viewer.html?file=\' + this.pdfurl, +\'PDF\'\n\npdfUrl是iframe标签的URL，pdfurl是需要查看的PDF文件的url\n')])])]),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),t("p",[n._v("只要能实现需求的代码就是好代码，我的项目是移动端查看PDF文件，因为文件上有电子签章，所以尝试了好几种方案，个人还是推荐第二种方案，如果没有电子签章的情况下。")])])}),[],!1,null,null,null);e.default=s.exports}}]);