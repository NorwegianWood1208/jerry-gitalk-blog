(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{536:function(e,n,a){"use strict";a.r(n);var t=a(20),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"写在前面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[e._v("#")]),e._v(" 写在前面")]),e._v(" "),a("p",[e._v("JavaScript发展之初，只是为了解决基础的表单验证问题，以及基础的页面交互，代码非常简单，不存在模块化的概念和问题。但是随着ajax的发展，web进入2.0时代，JavaScript成为一门应用非常广泛的语言。")]),e._v(" "),a("p",[e._v("这个时候js作为一门嵌入型语言，劣势就展示出来了，没有一个权威的规范，问题总是要解决，在前端发展的这几十年，也就顺势而为的产生了很多的js规范。")]),e._v(" "),a("h2",{attrs:{id:"前端模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端模块化"}},[e._v("#")]),e._v(" 前端模块化")]),e._v(" "),a("h3",{attrs:{id:"一、函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、函数"}},[e._v("#")]),e._v(" 一、函数")]),e._v(" "),a("p",[e._v("在最早的js中，想要实现分模块开发，最简单的就是函数，因为函数能形成一个相对封闭的空间，通过函数来实现简单的模块化也是最早的解决方案")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("function model1 = {\n    \n}\n\nfunction model2 = {\n\n}\n")])])]),a("h4",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("1、污染全局作用域\n2、维护成本高（命名容易冲突）\n3、依赖关系不明显\n")])])]),a("h3",{attrs:{id:"二、对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、对象"}},[e._v("#")]),e._v(" 二、对象")]),e._v(" "),a("p",[e._v("对象里面可以包含属性和方法，就相当于一个容器了，我们可以把每个模块的代码写到一个对象里面，从而实现模块化的目的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("var model1 = {\n    age: 11,\n    say() {\n        console.log(age)\n    }\n}\n\nvar model2 = {\n    age: 15,\n    say() {\n        console.log(age)\n    }\n}\n")])])]),a("h4",{attrs:{id:"缺点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("外部可以修改模块内部状态，可以随意修改每个模块的某个属性，有相当的安全隐患\n")])])]),a("h3",{attrs:{id:"三、自执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、自执行函数"}},[e._v("#")]),e._v(" 三、自执行函数")]),e._v(" "),a("p",[e._v("IIFE(immediately invoked function expression)，也就是我们说的自执行函数，通过定义一个匿名函数，创建了一个“私有”的命名空间，该命名空间的变量和方法，不会破坏全局的命名空间")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("var module = (function(){\n　　var age = 11\n    var say = function(){\n        console.log(age)\n    }\n    return {say};\n})();\n\nmodule.say();  //11\nconsole.log(module.age)  //undefined\n")])])]),a("h4",{attrs:{id:"缺点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("外部无法访问内部私有变量\n")])])]),a("h3",{attrs:{id:"四、commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、commonjs"}},[e._v("#")]),e._v(" 四、commonJs")]),e._v(" "),a("p",[e._v("前端真正提出模块化的概念，就是从commonJs的诞生开始的， 因为js作为一门嵌入型语言，处理页面逻辑和交互，即使没有模块化也能运行，并不会出什么问题，但是服务端却必须要有模块的概念。所以commonJs的发扬光大和nodejs相关，尤其是近几年nodejs的应用越来越广泛，npm统治整个前端以后，commonJs规范因此被大家熟知。")]),e._v(" "),a("h4",{attrs:{id:"_1、定义模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、定义模块"}},[e._v("#")]),e._v(" 1、定义模块")]),e._v(" "),a("p",[e._v("根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性")]),e._v(" "),a("h4",{attrs:{id:"_2、模块输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、模块输出"}},[e._v("#")]),e._v(" 2、模块输出")]),e._v(" "),a("p",[e._v("模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象")]),e._v(" "),a("h4",{attrs:{id:"_3、加载模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、加载模块"}},[e._v("#")]),e._v(" 3、加载模块")]),e._v(" "),a("p",[e._v("加载模块使用require方法，该方法读取一个文件并执行，返回文件内部的module.exports对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// model1.js\nvar age = 11\n\nfunction say(){\n\tconsole.log(age);\n}\nmodule.exports = {\n    say\n}\n\n// index.html\nvar wu = require('./index.js');\n\nconsole.log(wu.say)\n")])])]),a("h4",{attrs:{id:"_4、优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、优点"}},[e._v("#")]),e._v(" 4、优点")]),e._v(" "),a("p",[e._v("解决了依赖、全局变量污染的问题")]),e._v(" "),a("h4",{attrs:{id:"_5、缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、缺点"}},[e._v("#")]),e._v(" 5、缺点")]),e._v(" "),a("h5",{attrs:{id:"_1、同步加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、同步加载"}},[e._v("#")]),e._v(" 1、同步加载")]),e._v(" "),a("p",[e._v("CommonJS用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，CommonJS不适合浏览器端模块加载，合理的方案是使用异步加载。")]),e._v(" "),a("h5",{attrs:{id:"_2、浏览器不能用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、浏览器不能用"}},[e._v("#")]),e._v(" 2、浏览器不能用")]),e._v(" "),a("h3",{attrs:{id:"五、amd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、amd"}},[e._v("#")]),e._v(" 五、AMD")]),e._v(" "),a("p",[e._v("AMD 即Asynchronous Module Definition，中文名是异步模块定义的意思。")]),e._v(" "),a("p",[e._v("CommonJS 规范主要是为服务器端的 NodeJS 服务，服务器端加载模块文件无延时，但是在浏览器上就大不相同了。AMD 即是为了在浏览器宿主环境中实现模块化方案的规范之一。")]),e._v(" "),a("p",[e._v("由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎RequireJS，实际上AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。")]),e._v(" "),a("p",[e._v("官网地址不能用，可以直接在这个地址下载下来引用")]),e._v(" "),a("p",[e._v("https://requirejs.org/docs/release/2.3.6/comments/require.js")]),e._v(" "),a("h4",{attrs:{id:"_1、引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、引入依赖"}},[e._v("#")]),e._v(" 1、引入依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('<script src="js/require.js" data-main="./main"><\/script>\n')])])]),a("h4",{attrs:{id:"_2、模块定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、模块定义"}},[e._v("#")]),e._v(" 2、模块定义")]),e._v(" "),a("p",[e._v("由 define 方法来定义，在 define API 中：")]),e._v(" "),a("p",[e._v("id：模块名称，或者模块加载器请求的指定脚本的名字；")]),e._v(" "),a("p",[e._v("dependencies：是个定义中模块所依赖模块的数组，默认为 [“require”, “exports”, “module”]")]),e._v(" "),a("p",[e._v("factory：为模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值；")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// hello.js\ndefine('hello', function (x, y){\n  var add = function (x,y){\n    console.log(x, y) // 1, 2\n　  return x+y;\n　};\n  return {\n　  add: add\n　};\n});\n")])])]),a("h4",{attrs:{id:"_3、模块引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、模块引入"}},[e._v("#")]),e._v(" 3、模块引入")]),e._v(" "),a("p",[e._v("require()函数接受两个参数")]),e._v(" "),a("p",[e._v("第一个参数是一个数组，表示所依赖的模块")]),e._v(" "),a("p",[e._v("第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// main.js\n\nrequire.config({\n    'baseUrl': './js',\n    'paths': {\n        'hello': './hello'\n    }\n})\n\ndefine('main', function() {\n    require(['hello'], function(hello) {\n        console.log(hello.add(1, 2)) // 3\n    })\n})\n")])])]),a("p",[e._v("require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。")]),e._v(" "),a("h3",{attrs:{id:"六、cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、cmd"}},[e._v("#")]),e._v(" 六、CMD")]),e._v(" "),a("p",[e._v("CMD 全称为 Common Module Definition，是 Sea.js 所推广的一个模块化方案的输出。在 CMD define 的入参中，虽然也支持包含 id, deps 以及 factory 三个参数的形式，但推荐的是接受 factory 一个入参，然后在入参执行时，填入三个参数 require、exports 和 module：")]),e._v(" "),a("h4",{attrs:{id:"_1、定义模块-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、定义模块-2"}},[e._v("#")]),e._v(" 1、定义模块")]),e._v(" "),a("p",[e._v("require是可以把其他模块导入进来的一个参数;")]),e._v(" "),a("p",[e._v("而exports是可以把模块内的一些属性和方法导出的;")]),e._v(" "),a("p",[e._v("module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("define(function(require, exports, module) {\n  // 每个函数单独导出\n  exports.add = function(x, y) {\n    return x + y;\n  }\n});\n")])])]),a("h4",{attrs:{id:"_2、引用模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、引用模块"}},[e._v("#")]),e._v(" 2、引用模块")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("define(function(require, exports, module) {\n    var hello = require('hello');\n    console.log(hello.add(2,3));\n  \n    // 单独导出\n    exports.init = function init() {\n      console.log('init');\n    }\n});\n")])])]),a("h4",{attrs:{id:"_3、html调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、html调用"}},[e._v("#")]),e._v(" 3、html调用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("<script src=\"./js/sea.js\"><\/script>\n<script>\nseajs.config({\n  base: './js', // 后续引用基于此路径\n  alias: {  // 别名，可以用一个名称 替代路径（基于base路径）\n    hello: './js/hello.js'\n  },\n});\n\n// 加载入口模块\nseajs.use(\"./main.js\", function(main) {\n  main.init(); // init\n});\n<\/script>\n")])])]),a("h4",{attrs:{id:"_4、amd和cmd的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、amd和cmd的区别"}},[e._v("#")]),e._v(" 4、AMD和CMD的区别")]),e._v(" "),a("p",[e._v("关于这两种的区别网上有很多版本，大体意思差不多：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块\n\nCMD推崇就近依赖，只有在用到某个模块的时候再去require\n")])])]),a("p",[e._v("所以从这一点上来看，两者在性能上并没有太多差异。因为最影响页面渲染速度的当然是资源的加载速度，既然都是预加载，那么加载模块资源的耗时是一样的（网络情况相同时）。")]),e._v(" "),a("h3",{attrs:{id:"七、umd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、umd"}},[e._v("#")]),e._v(" 七、UMD")]),e._v(" "),a("p",[e._v("UMD，全称 Universal Module Definition，即通用模块规范。既然 CommonJs 和 AMD 风格一样流行，那么需要一个可以统一浏览器端以及非浏览器端的模块化方案的规范。")]),e._v(" "),a("p",[e._v("现在主流框架的源码都是用的UMD规范，因为它既可以兼容浏览器端又可以兼容node。")]),e._v(" "),a("h4",{attrs:{id:"umd的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#umd的实现"}},[e._v("#")]),e._v(" UMD的实现：")]),e._v(" "),a("p",[e._v("先判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块；")]),e._v(" "),a("p",[e._v("再判断是否支持 Node.js 模块格式（exports 是否存在），存在则使用 Node.js 模块格式；")]),e._v(" "),a("p",[e._v("前两个都不存在，则将模块公开到全局（window 或 global）；")]),e._v(" "),a("h4",{attrs:{id:"全局对象挂载属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局对象挂载属性"}},[e._v("#")]),e._v(" 全局对象挂载属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(function(root, factory) {\n    console.log('没有模块环境，直接挂载在全局对象上')\n    console.log(factory())\n    root.umdModule = factory();\n}(this, function() {\n    return {\n        name: '我是一个umd模块'\n    }\n}))\n")])])]),a("p",[e._v("我们把factory写成一个匿名函数，利用IIFE（立即执行函数）去执行工厂函数，返回的对象赋值给root.umdModule，这里的root就是指向全局对象this，其值可能是window或者global，视运行环境而定。")]),e._v(" "),a("h4",{attrs:{id:"兼容amd环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容amd环境"}},[e._v("#")]),e._v(" 兼容AMD环境")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // 如果环境中有define函数，并且define函数具备amd属性，则可以判断当前环境满足AMD规范\n        console.log('是AMD模块规范，如require.js')\n        define(factory)\n    } else {\n        console.log('没有模块环境，直接挂载在全局对象上')\n        root.umdModule = factory();\n    }\n}(this, function() {\n    return {\n        name: '我是一个umd模块'\n    }\n}))\n")])])]),a("h4",{attrs:{id:"兼容commonjs和cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容commonjs和cmd"}},[e._v("#")]),e._v(" 兼容commonJs和CMD")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(function(root, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n      console.log('是commonjs模块规范，nodejs环境')\n      module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n      console.log('是AMD模块规范，如require.js')\n      define(factory)\n  } else if (typeof define === 'function' && define.cmd) {\n      console.log('是CMD模块规范，如sea.js')\n      define(function(require, exports, module) {\n          module.exports = factory()\n      })\n  } else {\n      console.log('没有模块环境，直接挂载在全局对象上')\n      root.umdModule = factory();\n  }\n}(this, function() {\n  return {\n      name: '我是一个umd模块'\n  }\n}))\n")])])]),a("h4",{attrs:{id:"jquery-模块如何用-umd-规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jquery-模块如何用-umd-规范"}},[e._v("#")]),e._v(" jQuery 模块如何用 UMD 规范：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = function( root, jQuery ) {\n            if ( jQuery === undefined ) {\n                // require('jQuery') returns a factory that requires window to\n                // build a jQuery instance, we normalize how we use modules\n                // that require this pattern but the window provided is a noop\n                // if it's defined (how jquery works)\n                if ( typeof window !== 'undefined' ) {\n                    jQuery = require('jquery');\n                }\n                else {\n                    jQuery = require('jquery')(root);\n                }\n            }\n            factory(jQuery);\n            return jQuery;\n        };\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    $.fn.jqueryPlugin = function () { return true; };\n}));\n")])])]),a("h4",{attrs:{id:"vue源码umd规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue源码umd规范"}},[e._v("#")]),e._v(" vue源码UMD规范：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(function (global, factory) {\n  // 遵循UMD规范\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Vue = factory());\n}(this, function () { 'use strict';\n  ···\n  // Vue 构造函数\n  function Vue (options) {\n    // 保证了无法直接通过Vue()去调用，只能通过new的方式去创建实例\n    if (!(this instanceof Vue)\n    ) {\n      warn('Vue is a constructor and should be called with the `new` keyword');\n    }\n    this._init(options);\n  }\n  return Vue\n})\n")])])]),a("h3",{attrs:{id:"八、es6模块规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、es6模块规范"}},[e._v("#")]),e._v(" 八、es6模块规范")]),e._v(" "),a("p",[e._v("前端的模块化发展如此复杂，ECMAScript 标准的起草者 TC39 委员会不能再坐视不理，推出了ES2015 Modules（import、export），最后有了ES6模块化规范。")]),e._v(" "),a("p",[e._v("导入的值也是只读不可变对象，不像CommonJS是一个内存的拷贝，看一个栗子就能明白es6相比commonJs优点在什么地方。")]),e._v(" "),a("h4",{attrs:{id:"commonjs代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs代码"}},[e._v("#")]),e._v(" commonJs代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// 模块定义代码：lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n// 模块使用代码：main.js\nvar mod = require('./lib');\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\nvar mod2 = require('./lib');\nconsole.log(mod2.counter);  // 3\n")])])]),a("p",[e._v("为什么都是3？")]),e._v(" "),a("p",[e._v("CommonJS 规范是一种动态加载、拷贝值对象执行的模块规范。每个模块在被使用时，都是在运行时被动态拉取并被拷贝使用的，模块定义是唯一的，但有几处引用便有几处拷贝。所以，对于不同的 require 调用，生成的是不同的运行时对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  incCounter: incCounter,\n};\n// main.js\nvar mod = require('./lib');\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 4\n")])])]),a("p",[e._v("为什么加了一个getter函数就好了？")]),e._v(" "),a("p",[e._v("这是由于 CommonJS 的拷贝机制造成的。由于 CommonJS 规范的拷贝运行机制，在 lib.js 中使用 module.exports 输出的对象，是从 lib 模块内拷贝而得，当时 counter 的值是几，便拷贝了几。无论执行 incCounter 多少次，改变的都不是输出对象的 counter 变量。")]),e._v(" "),a("p",[e._v("而当定义了 getter 属性之后，该属性指向了被 incCounter 方法以闭包形式囊括的 counter 变量，这个变量是输出的模块对象的一部分。")]),e._v(" "),a("h4",{attrs:{id:"es6模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6模块化"}},[e._v("#")]),e._v(" ES6模块化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("/** 定义模块 hello.js **/\nvar age = 10;\nvar add = function (a, b) {\n    return age + a + b\n};\nexport { age, add };\n\n/** 引用模块 **/\nimport { age, add } from './js/hello.js';\nfunction test() {\n    console.log(age)\n    return add(20, age);\n}\nconsole.log(test())\n")])])]),a("p",[e._v("在 ES6 模块规范中，只有 export 与 import 两个关键字。")]),e._v(" "),a("p",[e._v("也可以使用default关键字")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("/** 定义模块 hello.js **/\nvar age = 10;\nvar add = function (a, b) {\n    return age + a + b\n};\nexport default { age, add };\n\n/** 引用模块 **/\nimport hello from './js/hello.js';\nfunction test() {\n    console.log(hello.age)\n    return hello.add(20, hello.age);\n}\nconsole.log(test())\n")])])]),a("h4",{attrs:{id:"es6-模块规范与-commonjs-规范不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块规范与-commonjs-规范不同"}},[e._v("#")]),e._v(" ES6 模块规范与 CommonJS 规范不同：")]),e._v(" "),a("p",[e._v("（1）ES6 模块规范是解析（是解析不是编译）时静态加载、运行时动态引用，所有引用出去的模块对象均指向同一个模块对象。在上面使用 CommonJS 规范声明的 lib 模块，如果使用 ES6 模块规范声明，根本不会出现 counter 变量含糊不清的问题。")]),e._v(" "),a("p",[e._v("（2）CommonJS 规范是运行时动态加载、拷贝值对象使用。每一个引用出去的模块对象，都是一个独立的对象。")]),e._v(" "),a("h3",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[e._v("#")]),e._v(" 写在最后")]),e._v(" "),a("p",[e._v("前端模块化有这么多的标准，为什么我们实际开发中用的那么少呢，因为后来出了webpack这个神器，把模块化编程需要做的都帮我们解决了。")]),e._v(" "),a("p",[e._v("webpack 自己实现了一套模块机制，无论是 CommonJS 模块的 require 语法还是 ES6 模块的 import 语法，都能够被解析并转换成指定环境的可运行代码。随着webpack打包工具的流行，ES6语法广泛手中，后来的开发者对于 AMD CMD的感知越来越少。")]),e._v(" "),a("h4",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("https://juejin.cn/post/6844903927104667662\nhttps://zhuanlan.zhihu.com/p/55407719\nhttps://www.cnblogs.com/dolphinX/p/4381855.html\nhttps://juejin.cn/post/6844903848511799303")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);