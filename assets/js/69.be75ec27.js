(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{553:function(e,n,s){"use strict";s.r(n);var a=s(15),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("用vue开发项目上线以后，发现首页加载速度非常慢，如果项目比较大，甚至可能出现10s以上的等待。用户体验非常差，试想如果你准备买一双AJ，登录某宝首页等了足足5s，那肯定果断选择某多多了。")]),e._v(" "),s("p",[e._v("以我们公司的项目为例，输入网址以后会出现十几秒的空白页，如果是后台管理系统还能接受，嵌套式的H5面对的是C端用户，产品肯定是无法接受的。")]),e._v(" "),s("p",[e._v("仔细分析了下，主要是打包后的app.js太大，以及我们引用的一些插件安装包加载比较慢，在网上搜了很多解决加载慢的方案，最终优化的时间移动端H5页面2秒多，后台管理系统5秒多。")]),e._v(" "),s("h2",{attrs:{id:"_1-路由懒加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-路由懒加载"}},[e._v("#")]),e._v(" 1.路由懒加载")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("{\n    path: '/chinaWine',\n    name: 'chinaWine',\n    component: resolve => require(['./views/chinaWine'], resolve)\n},\n")])])]),s("p",[e._v("此方法会把原本打包到一个app.js文件分开成多个js文件打包，这样会减小单个文件的大小，但是不会减小整个js文件夹的大小。")]),e._v(" "),s("p",[e._v("通过这种方式可以做到按需加载，只加载单个页面的js文件。")]),e._v(" "),s("h2",{attrs:{id:"_2、打包文件中去掉map文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、打包文件中去掉map文件"}},[e._v("#")]),e._v(" 2、打包文件中去掉map文件")]),e._v(" "),s("p",[e._v("打包的app.js过大，另外还有一些生成的map文件。先将多余的map文件去掉，")]),e._v(" "),s("p",[e._v("找到config文件夹下index.js文件,把这个build里面的productionSourceMap改成false即可")]),e._v(" "),s("h2",{attrs:{id:"_3、cdn引入第三方库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、cdn引入第三方库"}},[e._v("#")]),e._v(" 3、CDN引入第三方库")]),e._v(" "),s("p",[e._v("在项目开发中，我们会用到很多第三方库，如果可以按需引入，我们可以只引入自己需要的组件，来减少所占空间，")]),e._v(" "),s("p",[e._v("但也会有一些不能按需引入，我们可以采用CDN外部加载，在index.html中从CDN引入组件，去掉其他页面的组件import，修改webpack.base.config.js，在externals中加入该组件，这是为了避免编译时找不到组件报错。")]),e._v(" "),s("h2",{attrs:{id:"_4、gzip打包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、gzip打包"}},[e._v("#")]),e._v(" 4、gzip打包")]),e._v(" "),s("p",[e._v("gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。")]),e._v(" "),s("p",[e._v("html、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。")]),e._v(" "),s("h4",{attrs:{id:"_1、npm-i-d-compression-webpack-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、npm-i-d-compression-webpack-plugin"}},[e._v("#")]),e._v(" 1、npm i -D compression-webpack-plugin")]),e._v(" "),s("h4",{attrs:{id:"_2、在vue-config-js中配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、在vue-config-js中配置"}},[e._v("#")]),e._v(" 2、在vue.config.js中配置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("const CompressionPlugin = require('compression-webpack-plugin')\n\nconfigureWebpack: config => {\n    if (process.env.NODE_ENV === 'production') {\n        return {\n            plugins: [new CompressionPlugin({\n                test: /\\.js$|\\.html$|\\.css/,\n                threshold: 10240,\n                deleteOriginalAssets: false\n            })]\n        }\n    }\n}\n")])])]),s("h4",{attrs:{id:"_3、在nginx中配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、在nginx中配置"}},[e._v("#")]),e._v(" 3、在NGINX中配置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('http {\n    gzip  on;\n    gzip_min_length    1k;\n    gzip_buffers        4 8k;\n    gzip_http_version  1.0;\n    gzip_comp_level    8;\n    gzip_proxied        any;\n    gzip_types          application/javascript text/css image/gif;\n    gzip_vary          on;\n    gzip_disable        "MSIE [1-6]\\.";\n    #以下的配置省略...\n}\n')])])]),s("p",[e._v("nginx -s reload  ：修改配置后重新加载生效")]),e._v(" "),s("h2",{attrs:{id:"_5、终极大招-预渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、终极大招-预渲染"}},[e._v("#")]),e._v(" 5、终极大招，预渲染")]),e._v(" "),s("p",[e._v("其实把上面的优化做完，优化到5秒以内没问题了，但是如果像我司前端页面100多个，比较大的项目，可能还是会有点慢。")]),e._v(" "),s("p",[e._v("上面我们做了那么多，都是基于js执行完以后进行的渲染，如果想要更快一点，还有两种方案，一种是ssr也就是服务端渲染，一种就是预渲染。")]),e._v(" "),s("p",[e._v("预渲染是在js加载前，就生成了一个首页的静态页面，用于加载，不会让你等着了，静态页面的性能不用说了吧，嗖嗖的。")]),e._v(" "),s("p",[e._v("预渲染依赖的是prerender-spa-plugin插件，使用起来也非常的简单,但是坑非常多，一个地方尊重不到就会报错：")]),e._v(" "),s("h4",{attrs:{id:"_1、cnpm-install-prerender-spa-plugin-save-dev"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、cnpm-install-prerender-spa-plugin-save-dev"}},[e._v("#")]),e._v(" 1、cnpm install prerender-spa-plugin --save-dev")]),e._v(" "),s("p",[e._v("建议使用淘宝镜像的cnpm，因为npm安装经常失败，血泪教训，倒腾了一上午")]),e._v(" "),s("h4",{attrs:{id:"_2、vue-config-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、vue-config-js"}},[e._v("#")]),e._v(" 2、vue.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("const path = require('path');\nconst PrerenderSPAPlugin = require('prerender-spa-plugin');\nconst Renderer = PrerenderSPAPlugin.PuppeteerRenderer;\n\n在plugins下面，找到plugins对象，直接加到上面就行\n// 预渲染配置\nnew PrerenderSPAPlugin({\n    //要求-给的WebPack-输出应用程序的路径预渲染。\n    staticDir: path.join(__dirname, 'dist'),\n    //必需，要渲染的路线。\n    routes: ['/login'],\n    //必须，要使用的实际渲染器，没有则不能预编译\n    renderer: new Renderer({\n        inject: {\n            foo: 'bar'\n        },\n        headless: false, //渲染时显示浏览器窗口。对调试很有用。  \n        //等待渲染，直到检测到指定元素。\n        //例如，在项目入口使用`document.dispatchEvent(new Event('custom-render-trigger'))` \n        renderAfterDocumentEvent: 'render-event'\n    })\n})\n")])])]),s("h4",{attrs:{id:"_3、router-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、router-js"}},[e._v("#")]),e._v(" 3、router.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("需要把vue的router模式设置成history模式\n")])])]),s("h4",{attrs:{id:"_4、main-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、main-js"}},[e._v("#")]),e._v(" 4、main.js")]),e._v(" "),s("p",[e._v("在创建vue实例的mounted里面加一个事件，跟PrerenderSPAPlugin实例里面的renderAfterDocumentEvent对应上。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("mounted () {\n    document.dispatchEvent(new Event('render-event'))\n },\n")])])]),s("p",[e._v("这是预渲染的基本配置，npm run build 一下，如果dist文件夹多了你想预渲染的文件夹，那么恭喜你，成功了！如果项目是用nginx做的代理，nginx还需要做一些配置，具体是：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("location = / {\n  try_files /home/index.html /index.html;\n}\n\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n")])])]),s("p",[e._v("具体的根据自己需要欲渲染的路由自己配")]),e._v(" "),s("p",[e._v("虽然花了一天的时间，实现了预渲染，但是因为项目之前用的是hash路由，预渲染需要改成history模式，需要修改登录地址，我司用几千个终端商户，计划被迫流产。但是确实很快，适用于自己用的后台、新项目。")])])}),[],!1,null,null,null);n.default=t.exports}}]);