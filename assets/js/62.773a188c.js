(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{544:function(e,n,t){"use strict";t.r(n);var s=t(15),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("刚接触js的时候，对于es6的promise、async、await简直怕的要死，甚至有段时间非常害怕promise这个词，随着后面慢慢的接触，觉得这个东西并非那么难理解，主要还是需要弄懂js的一些基础知识。那么接下来，跟上我的思路，一起彻底弄懂promise、async、await。")]),e._v(" "),t("p",[e._v("关于这个系列一共三个比较重要的知识点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1、关于什么同步、异步，其中涉及了一些堆栈和消息队列、事件轮询的知识；\n\n2、关于异步编程的几个解决方案，主要是回调函数和promise；\n\n3、关于异步编程的终极解决方案Generator函数以及他的语法糖async、await。\n")])])]),t("p",[e._v("如果要弄懂promise，就必须弄懂什么是异步、什么是同步，这篇文章主要是讲一下什么是同步、什么是异步。")]),e._v(" "),t("h4",{attrs:{id:"js是怎么来的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js是怎么来的"}},[e._v("#")]),e._v(" js是怎么来的？")]),e._v(" "),t("p",[e._v("任何新语言的出现肯定是与他当时的需求有关系的，js全称是Javascript，诞生于1995年（跟我同岁）。最初他的诞生就是为了表单提交的时候做提示用的，在js问世之前，所有的表单都必须提交到服务端才能校验必填项。")]),e._v(" "),t("p",[e._v("比如你想申请一个qq号，各种信息填了一大堆，提交完才知道，你手机号少输入了一位重新输入，那肯定砸电脑的心都有了，这个时候，js出生了，因为是跟用户做实时交互的，所以最早叫livescript，当时为了蹭蹭Java的热度，上户口的时候就改成了Javascript，一不小心长大了可以跟Java平起平坐了。")]),e._v(" "),t("h4",{attrs:{id:"js为什么是单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js为什么是单线程"}},[e._v("#")]),e._v(" js为什么是单线程")]),e._v(" "),t("p",[e._v("js从诞生之初就是单线程，那为什么是单线程呢？为了让我们这些菜鸡更容易入门？当然不是。")]),e._v(" "),t("p",[e._v("js主要的用途就是操作DOM，以及与用户的交互，这就决定了他只能是单线程，\n比如你这个线程创建了一个DOM，那个线程给删除了，这时候浏览器应该以哪个为准，\n所以这个应该永远不会变，你前端发展的能造火箭了，js肯定也是单线程的。")]),e._v(" "),t("h2",{attrs:{id:"一、什么是同步和异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是同步和异步"}},[e._v("#")]),e._v(" 一、什么是同步和异步")]),e._v(" "),t("h3",{attrs:{id:"_1、什么是同步呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是同步呢"}},[e._v("#")]),e._v(" 1、什么是同步呢？")]),e._v(" "),t("p",[e._v("你可以理解为同一个时间，你只能干一件事。今天下班早，你想给女朋友打个电话，女朋友可能跟其他小伙伴一起吃饭呢，\n由于手机静音，所以听不到，你就一直打，一直打，啥都没干，把时间都浪费了，这就叫同步。因为js是单线程的嘛，所以js从小就是同步的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("来一段代码：\nfunction second() {\n    console.log('second')\n}\nfunction first(){\n    console.log('first')\n    second()\n    console.log('Last')\n}\nfirst()\n\n这个很简单，执行打印结果：\nfirst、second、last\n")])])]),t("p",[e._v("那么js执行这段代码，到底发生了什么呢？这里面又有一个‘调用栈’的概念")]),e._v(" "),t("h3",{attrs:{id:"_2、调用栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、调用栈"}},[e._v("#")]),e._v(" 2、调用栈")]),e._v(" "),t("p",[e._v("是不是一听到什么堆栈就害怕，别慌，没那么复杂，你可以理解为一个厕所，大家去上厕所，但是！不是先进先出，而是后进先出。用调用栈的概念，解释一下上面代码的执行顺序：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("当执行此代码时，将创建一个全局执行上下文并将其推到调用堆栈的顶部；// 这个不太重要，下面是重点\nfirst()函数先上，现在他在顶部；\n然后打印‘first’，然后执行完了，这个时候这个console.log会自动弹走，就是这个console.log虽然是后进来的，但是他先走了；\n现在first函数仍然在顶部，他下面还有second函数，所以不会弹走；\n执行second()函数,这时候second函数在顶部；\n打印‘second’，然后执行完了，弹走这个console.log，这时候second在顶部；\n这个时候second函数的事儿都干完了，他也弹走了，这时候first函数在顶部；\n浏览器会问，first你还有事吗，first说我还有一个，执行打印‘last’\n")])])]),t("h3",{attrs:{id:"_3、什么是异步呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、什么是异步呢"}},[e._v("#")]),e._v(" 3、什么是异步呢？")]),e._v(" "),t("p",[e._v("电话没打通，你就给女朋友发了个短信，洗澡去了，你回家了告诉我，（等我洗完了）再打给你，这就是异步。后来为了提高效率，把浏览器的多个内核都用起来，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。")]),e._v(" "),t("p",[e._v("所以这并没有影响js单线程的本质，js还是每次只能干一件事,只不过把洗澡提前了而已。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("来段代码：\nconst getList = () => {\n    setTimeout(() => {\n        console.log('我执行了！');\n    }, 2000);\n};\nconsole.log('Hello World');\ngetList();\nconsole.log('哈哈哈');\n\n执行顺序是：\nHello World、哈哈哈、我执行了！（两秒以后执行最后一个）\n")])])]),t("p",[e._v("这段代码执行，又发生了什么呢？这个地方又有一个‘消息队列’的概念，不慌！")]),e._v(" "),t("h3",{attrs:{id:"_4、消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、消息队列"}},[e._v("#")]),e._v(" 4、消息队列")]),e._v(" "),t("p",[e._v("刚才我们说了，同步的时候，浏览器会维护一个‘执行栈’，除了执行栈，在开启多线程的时候，浏览器还会维护一个消息列表，除了主线程，其余的都是副线程，这些副线程合起来就叫消息列表。")]),e._v(" "),t("p",[e._v("我们用消息列表的概念分析一下上面的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("按照执行顺序console.log('Hello World')先执行，浏览器一看，中央军（主线程）！你先过；\n然后是getlist函数执行，浏览器看到setTimeout,你是八L（副线程）！你先靠边等着；\n然后是console.log('哈哈哈')执行，中央军（主线程）！你也过；\n然后浏览器问，还有中央军吗？没了，八L开始过！\n")])])]),t("h5",{attrs:{id:"增加难度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增加难度"}},[e._v("#")]),e._v(" 增加难度：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("setTimeout(function() {\n    console.log('我是定时器！');\n})\nnew Promise(function(resolve) {\n    console.log('我是promise！');\n    resolve();\n}).then(function() {\n    console.log('我是then！');\n})\nconsole.log('我是主线程！');\n\n执行顺序：\n我是promise！\n我是主线程！\n我是then！\n我是定时器！\n")])])]),t("p",[e._v("为什么promise.then比定时器先执行呢？这个里面又涉及了一个‘事件轮询’的概念。")]),e._v(" "),t("h3",{attrs:{id:"_5、初识事件轮询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、初识事件轮询"}},[e._v("#")]),e._v(" 5、初识事件轮询")]),e._v(" "),t("p",[e._v("上面我们说了，浏览器为了提升效率，为js开启了一个不太一样的多线程，因为js不能同时执行嘛，那副线程（注意是副线程里面哈）里面谁执行，这个选择的过程，就可以理解为事件轮询。我们先用事件轮询的顺序分析一下上面的代码，再来上概念：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("promise函数肯定首先执行，他是主线程嘛，打印‘我是promise’；\n然后继续走主线程，打印‘我是主线程’；\n然后主线程走完了，开始走消息列表；\n（宏任务和微任务一会再讲）\n这个时候会先执行promise.then，因为他是微任务，里面的‘我是then！’\n消息列表里面在上面的是定时器，但是定时器是宏任务，优先级比较低，所以会往后排；\n")])])]),t("h3",{attrs:{id:"_6、什么是宏任务-微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、什么是宏任务-微任务"}},[e._v("#")]),e._v(" 6、什么是宏任务？微任务？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("**宏任务（Macrotasks）：**js同步执行的代码块，setTimeout、setInterval、XMLHttprequest、setImmediate、I/O、UI rendering等。\n\n**微任务（Microtasks）：**promise、process.nextTick（node环境）、Object.observe, MutationObserver等。\n\n微任务比宏任务要牛逼一点\n\n浏览器执行的顺序：\n(1)执行主代码块，这个主代码块也是宏任务\n(2)若遇到Promise，把then之后的内容放进微任务队列\n(3)遇到setTimeout，把他放到宏任务里面\n(4)一次宏任务执行完成，检查微任务队列有无任务 \n(5)有的话执行所有微任务 \n(6)执行完毕后，开始下一次宏任务。\n")])])]),t("h3",{attrs:{id:"_7、那么这个2、3、4、5、6执行的过程就是事件轮询。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、那么这个2、3、4、5、6执行的过程就是事件轮询。"}},[e._v("#")]),e._v(" 7、那么这个2、3、4、5、6执行的过程就是事件轮询。")]),e._v(" "),t("p",[e._v("在这儿感谢掘金大神的文章，为了表示尊重，挂上地址！")]),e._v(" "),t("p",[e._v("https://juejin.im/post/5e1d0de3e51d455887067f90")]),e._v(" "),t("p",[e._v("上一篇呢，主要是聊了聊同步、异步，他们各自引申出来的‘执行栈’、‘消息队列’，以及‘宏任务’、‘微任务’，如果大家对这几个概念不太了解，可以去这个链接：")]),e._v(" "),t("p",[e._v("https://www.jianshu.com/p/61e7844e68d8")]),e._v(" "),t("h2",{attrs:{id:"二、回调函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、回调函数"}},[e._v("#")]),e._v(" 二、回调函数")]),e._v(" "),t("p",[e._v("上面咱们说了，宏任务与微任务都是异步的，其中包括ajax请求、计时器等等，我们初步的了解一下promise，知道他是解决异步的一种方式，那么我们常用的一共有哪几种方法呢?第一种就是回调函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("先上代码：\nfunction f2() {\n    console.log('2222')\n}\nfunction f1(callback){\n    console.log('111')\n　　setTimeout(function () {\n　　　　callback(); \n　　}, 5000);\n　　console.log('3333')\n}\nf1(f2);\n\n先看下打印值是：\n111\n3333\n五秒后2222\n")])])]),t("p",[e._v("相当于主线程执行完了，会通过回调函数去调用f2函数，这个没什么毛病。但是看下下面的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("现在我们读取一个文件，fileReader就是一个异步请求\n\n// 这个异步请求就是通过回调函数的方式获取的\n\nvar reader = new FileReader()\nvar file = input.files[0]\nreader.readAsText(file, 'utf-8',function(err, data){\n    if(err){\n        console.log(err)\n    } else {\n        console.log(data)\n    }\n})\n")])])]),t("p",[e._v("现在看起来也很不错，但是如果文件上传出错了，我们还要在回调里面做判断，要是我们读取完这个文件接着要读取多个文件呢？是不是应该这么写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("读取完文件1之后再接着读取文件2、3\n\nvar reader = new FileReader()\nvar file = input.files[0]\nreader.readAsText(file1, 'utf-8',function(err1, data1){\n    if(err1){\n        console.log(err1)\n    } else {\n        console.log(data1)\n    }\n    reader.readAsText(file2, 'utf-8',function(err2, data2){\n        if(err2){\n            console.log(err2)\n        } else {\n            console.log(data2)\n        }\n        reader.readAsText(file3, 'utf-8',function(err3, data3){\n            if(err3){\n                console.log(err3)\n            } else {\n                console.log(data3)\n            }\n        })\n    })\n})\n")])])]),t("p",[e._v("这么写可以实现需求，但是这个代码的可读性就比较差，看起来就不那么优雅，也就是我们常说的‘回调地狱’。那么怎么破解这种嵌套式的回调呢？ES6为我们提供了promise：")]),e._v(" "),t("h2",{attrs:{id:"三、promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、promise"}},[e._v("#")]),e._v(" 三、promise")]),e._v(" "),t("p",[e._v("首先我们从字面意思上理解一下什么是promise？promise可以翻译成承诺、保证，这个地方你可以理解为：")]),e._v(" "),t("p",[e._v("女朋友让我干了一件事，虽然还没干完，但是我保证这件事会有一个结果给你，成功（fulfiled）或者失败（rejected），还有一个等待状态（pending）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("还是先上例子\n\nlet promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve(2000) // 成功以后这个resolve会把成功的结果捕捉到\n        // reject(2000) // 失败以后这个reject会把失败的结果捕捉到\n    }, 1000)\n    console.log(1111)\n})\n\npromise.then(res => {\n    console.log(res) // then里面第一个参数就能拿到捕捉到的成功结果\n}, err =>{\n    console.log(res)// then里面第二个参数就能拿到捕捉到的失败结果\n})\n\n打印结果：\n\n1111\n2000（一秒以后）\n")])])]),t("h3",{attrs:{id:"_1、then链式操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、then链式操作"}},[e._v("#")]),e._v(" 1、then链式操作")]),e._v(" "),t("p",[e._v("Promise对象的then方法返回一个新的Promise对象，因此可以通过链式调用then方法。")]),e._v(" "),t("p",[e._v("then方法接收两个函数作为参数，第一个参数是Promise执行成功时的回调，第二个参数是Promise执行失败时的回调，这个上面的例子说的很明白了，第二个参数捕捉的就是失败的回调。")]),e._v(" "),t("p",[e._v("两个函数只会有一个被调用，这句话怎么理解呢？\n女朋友让你去做西红柿鸡蛋汤，你要么就去做，要么就不做，叫外卖，肯定没有第三种选择\n。")]),e._v(" "),t("p",[e._v("函数的返回值将被用作创建then返回的Promise对象。这句话应该怎么理解呢？还是上例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve(2000)\n    }, 1000)\n    console.log(1111)\n})\npromise.then(res => {\n    console.log(res) // 这个地方会打印捕捉到的2000\n    return res + 1000 // 这个函数的返回值，返回的就是这个promise对象捕捉到的成功的值\n}).then(res => {\n    console.log(res) //这个地方打印的就是上一个promise对象return的值\n})\n\n所以打印顺序应该是：\n\n1111\n2000\n3000\n")])])]),t("p",[e._v("刚才我们看到了then接受两个参数，一个是成功的回调、一个是失败的回调，看起来好像也不是那么优雅，promise里除了then还提供了catch方法：")]),e._v(" "),t("h3",{attrs:{id:"_2、catch捕捉操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、catch捕捉操作"}},[e._v("#")]),e._v(" 2、catch捕捉操作")]),e._v(" "),t("p",[e._v("这个catch就是专门捕捉错误的回调的，还是先看例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        reject(2000) // 失败以后这个reject会把失败的结果捕捉到\n    }, 1000)\n    console.log(1111)\n})\npromise.catch(res => {\n    console.log(res) // catch里面就能拿到捕捉到的失败结果\n})\n\n打印结果：\n\n1111\n2000（一秒以后）\n")])])]),t("p",[e._v("除了then和catch之外，promise还有两个语法，all和race，我们也简单用一下：")]),e._v(" "),t("h3",{attrs:{id:"_3、all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、all"}},[e._v("#")]),e._v(" 3、all")]),e._v(" "),t("p",[e._v("现在我们有这么一个需求，一共有三个接口A、B、C，必须三个接口都成功以后，才能发起第四个请求，怎么实现呢？")]),e._v(" "),t("h5",{attrs:{id:"链式调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链式调用"}},[e._v("#")]),e._v(" 链式调用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let getInfoA = new Promise((resolve, reject) => {\n    console.log('小A开始执行了')\n    resolve()\n}).then(res => {\n    let getInfoB = new Promise((resolve, reject) => {\n        console.log('小B开始执行了')\n        resolve()\n    }).then(res => {\n        let getInfoC = new Promise((resolve, reject) => {\n            console.log('小C开始执行了')\n            resolve()\n        }).then(res => {\n            console.log('全都执行完了！')\n        })\n    })\n})\n")])])]),t("p",[e._v("一层套一层的，好像不是那么优雅")]),e._v(" "),t("h5",{attrs:{id:"all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[e._v("#")]),e._v(" all")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let getInfoA = new Promise((resolve, reject) => {\n    console.log('小A开始执行了')\n    resolve()\n})\nlet getInfoB = new Promise((resolve, reject) => {\n    console.log('小B开始执行了')\n    resolve()\n})\nlet getInfoC = new Promise((resolve, reject) => {\n    console.log('小C开始执行了')\n    resolve()\n})\nPromise.all([getInfoA, getInfoB, getInfoC]).then(res => {\n   console.log('全都执行完了！')\n})\n")])])]),t("p",[e._v("接收一个Promise对象组成的数组作为参数，当这个数组所有的Promise对象状态都变成resolved或者rejected的时候，它才会去调用then方法。非常完美，非常优雅。")]),e._v(" "),t("h3",{attrs:{id:"_4、race"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、race"}},[e._v("#")]),e._v(" 4、race")]),e._v(" "),t("p",[e._v("现在又有一个需求，同样是接口A、B、C，只要有一个响应了，我就可以调接口D，那么怎么实现呢？")]),e._v(" "),t("h5",{attrs:{id:"传统方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统方式"}},[e._v("#")]),e._v(" 传统方式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let getInfoA = new Promise((resolve, reject) => {\n    console.log('小A开始执行了')\n    setTimeout((err => {\n        resolve('小A最快')\n    }),1000)\n}).then(res =>{\n    console.log(res)\n})\nlet getInfoB = new Promise((resolve, reject) => {\n    console.log('小B开始执行了')\n    setTimeout((err => {\n        resolve('小B最快')\n    }),1001)\n}).then(res =>{\n    console.log(res)\n})\nlet getInfoC = new Promise((resolve, reject) => {\n    console.log('小C开始执行了')\n    setTimeout((err => {\n        resolve('小C最快')\n    }),1002)\n}).then(res =>{\n    console.log(res)\n})\n\n打印结果\n\n小A开始执行了\n小B开始执行了\n小C开始执行了\n小A最快\n")])])]),t("p",[e._v("这个方法得写三遍，好像也不是那么优雅，一起来看下race应该怎么写？")]),e._v(" "),t("h5",{attrs:{id:"race"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#race"}},[e._v("#")]),e._v(" race")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("let getInfoA = new Promise((resolve, reject) => {\n    console.log('小A开始执行了')\n    setTimeout((err => {\n        resolve('小A最快')\n    }),1000)\n})\nlet getInfoB = new Promise((resolve, reject) => {\n    console.log('小B开始执行了')\n    setTimeout((err => {\n        resolve('小B最快')\n    }),1001)\n})\nlet getInfoC = new Promise((resolve, reject) => {\n    console.log('小C开始执行了')\n    setTimeout((err => {\n        resolve('小C最快')\n    }),1002)\n})\nPromise.race([getInfoA, getInfoB, getInfoC]).then(res => {\n    console.log(res)\n})\n\n打印结果\n\n小A开始执行了\n小B开始执行了\n小C开始执行了\n小A最快\n")])])]),t("p",[e._v("与Promise.all相似的是，Promise.race都是以一个Promise对象组成的数组作为参数，不同的是，只要当数组中的其中一个Promsie状态变成resolved或者rejected时，就可以调用.then方法了。")]),e._v(" "),t("h5",{attrs:{id:"promise是es6用来解决异步的一个方法-现在用的已经比较广泛了-像我们经常用的axios-他就是用promise封装的-用起来非常方便。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise是es6用来解决异步的一个方法-现在用的已经比较广泛了-像我们经常用的axios-他就是用promise封装的-用起来非常方便。"}},[e._v("#")]),e._v(" promise是ES6用来解决异步的一个方法，现在用的已经比较广泛了，像我们经常用的axios，他就是用promise封装的，用起来非常方便。")]),e._v(" "),t("p",[e._v("之前聊了异步编程的回调函数和promise，用promise解决异步编程，如果多个调用，就会看起来不那么舒服。")]),e._v(" "),t("p",[e._v("es6除了提供了promise还为我们提供了更加强大的async和await，async、await是Generator函数的语法糖，如果想要完全掌握async、await的用法，必须要掌握Generator函数的使用。")]),e._v(" "),t("h2",{attrs:{id:"四、generator-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、generator-函数"}},[e._v("#")]),e._v(" 四、Generator 函数")]),e._v(" "),t("h3",{attrs:{id:"_1、什么是-generator-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是-generator-函数"}},[e._v("#")]),e._v(" 1、什么是 Generator 函数？")]),e._v(" "),t("p",[e._v("来自阮一峰老师文档上的解释：Generator函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。")]),e._v(" "),t("p",[e._v("你可以这么理解，这个函数自己执行不了，得让别人帮忙执行，踢一脚（next()），走一步。")]),e._v(" "),t("h4",{attrs:{id:"基本的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本的用法"}},[e._v("#")]),e._v(" 基本的用法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function* doSomething() {\n    yield '吃饭'\n    return '睡觉'\n}\n\nlet newDoSomething = doSomething() // 自己执行不了，需要指向一个状态机\n\nconsole.log(newDoSomething.next()) // {value: \"吃饭\", done: false}\nconsole.log(newDoSomething.next()) // {value: \"睡觉\", done: true}\n")])])]),t("h5",{attrs:{id:"从上面的例子可以看出来-generator-函数有四个特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从上面的例子可以看出来-generator-函数有四个特点"}},[e._v("#")]),e._v(" 从上面的例子可以看出来，Generator 函数有四个特点：")]),e._v(" "),t("p",[e._v("1、function后面有个小*，这个地方有两种写法，没啥太大区别；")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function* doSomething(){}\nfunction *doSomething(){}\n")])])]),t("p",[e._v("2、函数里面会有一个yield，把函数截成不同的状态；")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("一个yield可以截成两个状态，也就需要两个next()触发；\n")])])]),t("p",[e._v("3、Generator函数自己不会执行，而是会返回一个遍历器对象；")]),e._v(" "),t("p",[e._v("4、遍历器对象会通过.next()方法依次调用各个状态。")]),e._v(" "),t("h4",{attrs:{id:"消息传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息传递"}},[e._v("#")]),e._v(" 消息传递")]),e._v(" "),t("p",[e._v("Generator函数除了能控制函数分状态的执行，还有一个非常重要的作用就是消息传递，还是上例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function *doSomething() {\n    let x = yield 'hhh'\n    console.log(x)\n    return (x * 2)\n}\n\nlet newDoSomething = doSomething()\n\nconsole.log(newDoSomething.next(1))  \nconsole.log(newDoSomething.next(2))  \n\n\n打印结果：\n\n{value: \"hhh\", done: false}\n2\n{value: 4, done: true}\n")])])]),t("p",[e._v("具体分析一下为什么会打印这个：   （"),t("em",[e._v("重点")]),e._v("）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('//{value: "hhh", done: false}\n第一个next()是Generator函数的启动器\n这个时候打印的是yield后面的值\n重点的一句，yield后面的值并不会赋值给x\n\n//2\n暂停执行的时候，yield表达式处可以接收下一个启动它的next(...)传进来的值\n你可以理解为：\n这个时候第二个next传入的参数会把第一个yield的值替换掉\n\n //{value: 4, done: true}\n这个时候，x被赋值2，所以打印2*2\n')])])]),t("h5",{attrs:{id:"注意几个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意几个问题"}},[e._v("#")]),e._v(" 注意几个问题：")]),e._v(" "),t("h6",{attrs:{id:"第一个next-是用来启动generator函数的-传值会被忽略-没用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一个next-是用来启动generator函数的-传值会被忽略-没用"}},[e._v("#")]),e._v(" 第一个next()是用来启动Generator函数的，传值会被忽略，没用")]),e._v(" "),t("h6",{attrs:{id:"yield的用法和return比较像-你可以当做return来用-如果yield后没值-return-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yield的用法和return比较像-你可以当做return来用-如果yield后没值-return-undefined"}},[e._v("#")]),e._v(" yield的用法和return比较像，你可以当做return来用，如果yield后没值，return undefined")]),e._v(" "),t("h6",{attrs:{id:"最后一个next-函数-得到的是函数return的值-如果没有-也是undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后一个next-函数-得到的是函数return的值-如果没有-也是undefined"}},[e._v("#")]),e._v(" 最后一个next()函数，得到的是函数return的值，如果没有，也是undefined")]),e._v(" "),t("h5",{attrs:{id:"彻底理解了上面的概念-再来看下下面的栗子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解了上面的概念-再来看下下面的栗子"}},[e._v("#")]),e._v(" 彻底理解了上面的概念，再来看下下面的栗子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function *doSomething() {\n    let x = yield 'hhh'\n    let y = yield (x + 3)\n    let z = yield (y * 3)\n    return (x * 2)\n}\n\nlet newDoSomething = doSomething()\n\nconsole.log(newDoSomething.next(1))  // {value: \"hhh\", done: false}\nconsole.log(newDoSomething.next(2))  // {value: 5, done: false}\nconsole.log(newDoSomething.next(100)) // {value: 300, done: false}\nconsole.log(newDoSomething.next(1000)) // {value: 4, done: true}\n")])])]),t("p",[e._v("还是用上面的思路分析一下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("第一个next(1)，传进去的值没用，打印的是yield后的值\n第二个next(2)，这个时候的x已经被赋值为2,所以打印2+3\n第三个next(100)，这个时候的y已经被赋值为100,所以打印100*3\n第四个next(1000)，这个时候y已经被赋值为1000,,但是打印的是x*2，所以打印的4 \n")])])]),t("h5",{attrs:{id:"再来看个特殊的情况-特殊的才是容易掉坑的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#再来看个特殊的情况-特殊的才是容易掉坑的"}},[e._v("#")]),e._v(" 再来看个特殊的情况：（特殊的才是容易掉坑的）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function *doSomething() {\n    let x = yield 'hhh'\n    console.log(x)\n    let y = yield (x + 3)\n    console.log(y)\n    let z = yield (y * 3)\n    return (x * 2)\n}\n\nlet newDoSomething = doSomething()\n\nconsole.log(newDoSomething.next(1))\nconsole.log(newDoSomething.next(2))\nconsole.log(newDoSomething.next())\nconsole.log(newDoSomething.next())\n")])])]),t("p",[e._v("看下打印结果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('{value: "hhh", done: false}\n2\n{value: 5, done: false}\nundefined\n{value: NaN, done: false}\n{value: 4, done: true}\n')])])]),t("p",[e._v("分析下为什么打印undefined？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('1、第一个next(1)传进去的1，没有起任何意义，打印的{value: "hhh", done: false}；\n2、第二个next(2)传进去的2，所以x会打印2，第二个next(2)打印2+3；\n3、第三个next()传进去的是空，那么y打印的就是未定义，undefined*3那肯定就是NaN；\n4、第四个next()传进去的是空，但是return的是x，刚才说了x是2，那打印的是2*2\n')])])]),t("h2",{attrs:{id:"五、async、await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、async、await"}},[e._v("#")]),e._v(" 五、async、await")]),e._v(" "),t("h3",{attrs:{id:"_1、什么是async、await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是async、await"}},[e._v("#")]),e._v(" 1、什么是async、await？")]),e._v(" "),t("p",[e._v("async、await是Generator函数的语法糖，原理是通过Generator函数加自动执行器来实现的，这就使得async、await跟普通函数一样了，不用再一直next执行了。")]),e._v(" "),t("p",[e._v("他吸收了Generator函数的优点，可以通过await来把函数分状态执行，但是又不用一直next，可以自动执行。")]),e._v(" "),t("p",[e._v("还是上例子：")]),e._v(" "),t("h5",{attrs:{id:"栗子1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栗子1"}},[e._v("#")]),e._v(" 栗子1")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function f() {\n    return new Promise(resolve =>{\n        resolve('hhh')\n    })\n}\nasync function doSomething1(){\n    let x = await f()\n}\n\ndoSomething1()\n\n打印结果：\n\nhhh\n")])])]),t("p",[e._v("看了上面的例子，可以看出async有三个特点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1、函数前面会加一个async修饰符，来证明这个函数是一个异步函数；\n\n2、await 是个运算符，用于组成表达式，它会阻塞后面的代码\n\n3、await 如果等到的是 Promise 对象，则得到其 resolve值。\n")])])]),t("h5",{attrs:{id:"栗子2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栗子2"}},[e._v("#")]),e._v(" 栗子2")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("async function doSomething1(){\n    let x = await 'hhh'\n    return x\n}\n\nconsole.log(doSomething1())\n\ndoSomething1().then(res => {\n    console.log(res)\n})\n\n打印结果：\n\nPromise {<pending>}\nhhh\n")])])]),t("p",[e._v("分析一下上面的栗子可以得到这两个特点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1、async返回的是一个promise对象，函数内部 return 返回的值，会成为 then 方法回调函数的参数；\n\n2、await如果等到的不是promise对象，就得到一个表达式的运算结果。\n")])])]),t("h3",{attrs:{id:"_2、async、await项目中的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、async、await项目中的使用"}},[e._v("#")]),e._v(" 2、async、await项目中的使用")]),e._v(" "),t("p",[e._v("现在有一个封装好的，获取数据的方法，我们分别用promise、Generator、async来实现发请求，做一下比较：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function getList() {\n    return new Promise((resolve, reject) =>{\n        $axios('/pt/getList').then(res => {\n            resolve(res)\n        }, err => {\n            reject(err)\n        })\n    })\n}\n")])])]),t("h4",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" promise")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function initTable() {\n    getList().then(res => {\n        console.log(res)\n    }).catch(err => {\n        this.$message(err) // element的语法\n    })\n}\n\n然后直接调用就可以\n这么做看起来非常的简洁，但是如果多个请求调用\n就会是.then,.then看起来非常不舒服\n")])])]),t("h4",{attrs:{id:"generator函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generator函数"}},[e._v("#")]),e._v(" Generator函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("function *initTable(args) {\n    const getList = yield getlist(args)\n    return getList\n}\n\nfunction getList() {\n    const g = initTable(this.searchParams)\n    const gg = g.next().value\n    gg.then(res =>{\n        this.total = res.data.count\n        if (res.data.list) {\n          this.tableList = res.data.list\n          this.tableList.forEach(e => {\n            e.receiveAmt = format(e.receiveAmt)\n          })\n        } else {\n          this.tableList = []\n        }\n    })\n}\n\n这个看起来就比较伤，写起来非常麻烦\n")])])]),t("h4",{attrs:{id:"async-await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[e._v("#")]),e._v(" async await")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("async initTable() { // table列表查\n  const getData = await getList(this.searchParams)\n  return getData\n},\n\ngetList() {\n  this.initTable().then(res =>{\n    this.tableList = res.data.list\n  })\n}\n\n这样写好像也很简单，而且非常方便\n\n主要是如果调用多个接口，可以直接多个await\n")])])]),t("p",[e._v("以上是我个人对promise、async、await的一点见解，有不对的欢迎各位大佬留言或者加我微信交流。")]),e._v(" "),t("p",[e._v("个人的微信公众号：小Jerry有话说，平时会发一些技术文章和读书笔记，欢迎交流。")]),e._v(" "),t("p",[e._v("后面会持续更新一些js基础的文章，长得好看的哥哥姐姐们可以点个关注。")])])}),[],!1,null,null,null);n.default=a.exports}}]);